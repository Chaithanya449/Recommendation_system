# -*- coding: utf-8 -*-
"""movie_recommendation-system.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x79w6ITLCng_4DuOq8tGsLvHzSO717YJ
"""

import pandas as pd

# Mini movie dataset with title + description
data = {
    'title': [
        'The Matrix',
        'John Wick',
        'Avengers: Endgame',
        'Inception',
        'The Dark Knight',
        'Interstellar',
        'The Prestige',
        'Shutter Island',
        'Iron Man',
        'Batman Begins'
    ],
    'description': [
        'A computer hacker learns about the true nature of reality and his role in the war against its controllers.',
        'An ex-hitman comes out of retirement to track down the gangsters that killed his dog.',
        'Superheroes assemble to reverse the damage caused by Thanos in the previous film.',
        'A thief who steals corporate secrets through dream-sharing is given a task to plant an idea.',
        'Batman faces a psychopathic criminal called the Joker who seeks to plunge Gotham into chaos.',
        'A team of explorers travel through a wormhole in space in an attempt to save humanity.',
        'Two stage magicians engage in a battle to create the ultimate illusion while sacrificing everything.',
        'A U.S. Marshal investigates the disappearance of a murderer who escaped from a hospital for the criminally insane.',
        'After being held captive in Afghanistan, Tony Stark builds a suit of armor to escape and becomes Iron Man.',
        'After training with his mentor, Batman begins his fight to free Gotham from corruption.'
    ]
}

# Create DataFrame
df = pd.DataFrame(data)

# Show the dataset
df

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
#TfidfVectorizer to convert raw text into vectors
tfidf=TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(df['description'])
#Cosine similarity to compare description of two movies
similarity= cosine_similarity(tfidf_matrix,tfidf_matrix)
import numpy as np
np.set_printoptions(precision=2)
similarity

def recommend(movie_name):
  #movie_name = movie_name.lower()
  #Obtaining index number for movie_name
  index = None
  for i in range(len(df)):
    if df.iloc[i].title == movie_name:
      index = i
      break

  if index is None:
        return [" Movie not found "]
  #Obtaining similarity score of the input movie
  tfidf=TfidfVectorizer(stop_words='english')
  tfidf_matrix = tfidf.fit_transform(df['description'])
  similarity= cosine_similarity(tfidf_matrix,tfidf_matrix)
  sim_score = list(enumerate(similarity[index]))
  sim_score = sorted(sim_score , key = lambda X:X[1] , reverse=True)
  #Getting first five similar movies to the input movie
  recommend = []
  for i in sim_score [1:6]:
    recommend.append(df.iloc[i[0]].title)

  return recommend

print(recommend('John Wick'))